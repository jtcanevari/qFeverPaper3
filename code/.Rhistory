10^(-2)/365
10^(-6)*1000/365
20^(-2)/365
20^(-1)/
20^(-1)
20^(-2)
20^(-3)
20^(-3)/365
20^(-2)/365
20^(-2)
params <- c(phi = 0.95, mu = (1+(22/30)*0.7)/(3.1*365), fI = 0.8, fJ = 0.25, gamma = 4/150,
alpha = 0.2, beta = 2.5, p = 0.5, epsilon.p = 1, epsilon.f = 20^(-2)/365, muE = 1/20)
nsims = 50
system.time(
modelOut <- lapply(1:nsims, function(i) CaneGillespie(103,365*15, xstart, params))
)
#------------------------------------------------------------#
# Q fever output analysis
#------------------------------------------------------------#
library(lubridate); library(dplyr); library(ggplot2); library(scales)
#unlist simulations
for(i in 1:nsims){
modelOut[[i]] <- do.call(data.frame, modelOut[[i]])
modelOut[[i]]$iter <- i}
dat <- do.call(rbind, modelOut)
#flag kidding event with a 1
dat <- dat %>% group_by(iter) %>% mutate(kevent = ave(K, FUN=function(x) c(0, diff(x))))
#flag kidding of an infected doe with a 1
dat <- dat %>% group_by(iter) %>% mutate(kinf.event=ave(KI, FUN=function(x) c(0, diff(x))))
#flag abortions
dat <- dat %>% group_by(iter) %>% mutate(abort = ave(A, FUN=function(x) c(0, diff(x))))
#obtain year
dat$date <- as.Date.numeric(dat$time, origin = dmy("13-04-2014"))
dat$year <- year(dat$date)
#count events
tdat <- plyr::count(dat[dat$kevent == 1,], c("iter","year"))
inf <- plyr::count(dat[dat$kinf.event == 1,], c("iter","year"))
abort <- plyr::count(dat[dat$abort == 1,], c("iter","year"))
#merge kiddings with count of infected does kiddings
tdat <- merge(tdat, inf, by=c("iter","year"), all.x = TRUE )
colnames(tdat)[c(3,4)] <- c("total.kid", "inf.kid")
#merge kiddings with count of abortions
tdat <- merge(tdat, abort, by=c("iter","year"), all.x = TRUE )
colnames(tdat)[5] <- c("abortions")
#calculate shedding incidence risk and abortion risk
tdat$incidence <- round(tdat$inf.kid/tdat$total.kid,3)
tdat$abortion.risk<- round(tdat$abortions / (tdat$abortions + tdat$total.kid),3)
tdat <- subset(tdat, !year==max(year))
# pdf('outputDutchV03.pdf')
ggplot()+
geom_point(aes(x=year,y=incidence, colour=factor(iter)),data=tdat)+
geom_line(aes(x=year,y=incidence, colour = factor(iter)),data=tdat)+
scale_x_continuous(breaks=2014:2028, labels = 1:15)+
theme(legend.position = "none")+
labs(title = "Inicidence of shedding does at kidding",
subtitle = "Dutch version 50 iters 15 years",
caption = paste("alhpa = ", params[6], "beta = ", params[7]),
x = "year", y = "incidence")
ggplot()+
geom_point(aes(x=year,y=abortion.risk, colour = factor(iter)),data=tdat)+
geom_line(aes(x=year,y=abortion.risk, colour = factor(iter)),data=tdat)+
scale_x_continuous(breaks=2014:2028, labels = 1:15)+
theme(legend.position = "none")+
labs(title = "Abortion risk over time",
subtitle = "Dutch version 100 iters 15 years",
caption = paste("alhpa = ", params[6], "beta = ", params[7]),
x = "year", y = "risk")
#------------------------------------------------------------#
# Q fever output analysis
#------------------------------------------------------------#
library(lubridate); library(dplyr); library(ggplot2); library(scales)
#unlist simulations
for(i in 1:nsims){
modelOut[[i]] <- do.call(data.frame, modelOut[[i]])
modelOut[[i]]$iter <- i}
dat <- do.call(rbind, modelOut)
nsims = 50
system.time(
modelOut <- lapply(1:nsims, function(i) CaneGillespie(103,365*15, xstart, params))
)
#unlist simulations
for(i in 1:nsims){
modelOut[[i]] <- do.call(data.frame, modelOut[[i]])
modelOut[[i]]$iter <- i}
dat <- do.call(rbind, modelOut)
#flag kidding event with a 1
dat <- dat %>% group_by(iter) %>% mutate(kevent = ave(K, FUN=function(x) c(0, diff(x))))
#flag kidding of an infected doe with a 1
dat <- dat %>% group_by(iter) %>% mutate(kinf.event=ave(KI, FUN=function(x) c(0, diff(x))))
#flag abortions
dat <- dat %>% group_by(iter) %>% mutate(abort = ave(A, FUN=function(x) c(0, diff(x))))
#obtain year
dat$date <- as.Date.numeric(dat$time, origin = dmy("13-04-2014"))
dat$year <- year(dat$date)
#count events
tdat <- plyr::count(dat[dat$kevent == 1,], c("iter","year"))
inf <- plyr::count(dat[dat$kinf.event == 1,], c("iter","year"))
abort <- plyr::count(dat[dat$abort == 1,], c("iter","year"))
#merge kiddings with count of infected does kiddings
tdat <- merge(tdat, inf, by=c("iter","year"), all.x = TRUE )
colnames(tdat)[c(3,4)] <- c("total.kid", "inf.kid")
#merge kiddings with count of abortions
tdat <- merge(tdat, abort, by=c("iter","year"), all.x = TRUE )
colnames(tdat)[5] <- c("abortions")
#calculate shedding incidence risk and abortion risk
tdat$incidence <- round(tdat$inf.kid/tdat$total.kid,3)
tdat$abortion.risk<- round(tdat$abortions / (tdat$abortions + tdat$total.kid),3)
tdat <- subset(tdat, !year==max(year))
# pdf('outputDutchV03.pdf')
ggplot()+
geom_point(aes(x=year,y=incidence, colour=factor(iter)),data=tdat)+
geom_line(aes(x=year,y=incidence, colour = factor(iter)),data=tdat)+
scale_x_continuous(breaks=2014:2028, labels = 1:15)+
theme(legend.position = "none")+
labs(title = "Inicidence of shedding does at kidding",
subtitle = "Dutch version 50 iters 15 years",
caption = paste("alhpa = ", params[6], "beta = ", params[7]),
x = "year", y = "incidence")
ggplot()+
geom_point(aes(x=year,y=abortion.risk, colour = factor(iter)),data=tdat)+
geom_line(aes(x=year,y=abortion.risk, colour = factor(iter)),data=tdat)+
scale_x_continuous(breaks=2014:2028, labels = 1:15)+
theme(legend.position = "none")+
labs(title = "Abortion risk over time",
subtitle = "Dutch version 100 iters 15 years",
caption = paste("alhpa = ", params[6], "beta = ", params[7]),
x = "year", y = "risk")
#donde termina una epidemia?
tdat$active.kinf <- ifelse(tdat$inf.kid>0,1,0)
tdat$active.abo <- ifelse(tdat$abortions>0,1,0)
tdat$active <- ifelse(tdat$active.kinf == 1 | tdat$active.abo == 1,1,0)
surv.dat <- data.frame(tapply(tdat$year[tdat$active == 1], tdat$iter[tdat$active == 1], max))
colnames(surv.dat)<-'year'
surv.dat$start <- 0
surv.dat$stop <- surv.dat$year-2013 #this is your stop for survival
surv.dat$status <- 1
surv.dat$status[surv.dat$year == max(tdat$year)] <-0
library(survival); library(survminer)
km_fit <- survfit(Surv(stop, status) ~ 1, data=surv.dat)
ggsurvplot(km_fit, data = surv.dat, ggtheme = theme_bw(), risk.table = TRUE,xlab='Time (years)',conf.int = FALSE)
#flag kidding of an infected doe with a 1
dat <- dat %>% group_by(iter) %>% mutate(ip.track=ave(IP, FUN=function(x) c(0, diff(x))))
dat$ipKids<-NA
dat$ipKids[dat$ip.track == -1 & dat$kevent == 1] <- 1
#flag kidding of an infected class2 doe with a 1
dat <- dat %>% group_by(iter) %>% mutate(ip2.track=ave(IP2, FUN=function(x) c(0, diff(x))))
dat$ip2Kids<-NA
dat$ip2Kids[dat$ip2.track == -1 & dat$kevent == 1] <- 1
#flag kidding of an persistently infected doe with a 1
dat <- dat %>% group_by(iter) %>% mutate(jp.track=ave(JP, FUN=function(x) c(0, diff(x))))
dat$jpKids<-NA
dat$jpKids[dat$jp.track == -1 & dat$kevent == 1] <- 1
tot.ipkid <- sum(dat$ipKids, na.rm = T)
tot.ip2kid <- sum(dat$ip2Kids, na.rm = T)
tot.jpkid <- sum(dat$jpKids, na.rm = T)
tot.infkid <- sum(tot.ipkid, tot.ip2kid, tot.jpkid)
ip.prop <- tot.ipkid/tot.infkid
ip2.prop <- tot.ip2kid/tot.infkid
jp.prop <- tot.jpkid/tot.infkid
df <- data.frame(
group = c("IP", "IP2", "JP"),
value = c(ip.prop, ip2.prop, jp.prop)
)
loc.lab <- df$value/2 + cumsum(df$value)[1:nrow(df)]
lab <- round(df$value,2)
# png('distShedComp.png')
ggplot(df, aes(x="", y=value, fill=group))+
geom_bar(width = 1, stat = "identity")+
xlab('')+
geom_text(aes(y = value/2 + c(0, cumsum(value)[-length(value)]),
label = percent(value)), size=5)
changes <- matrix(
c(1,0,0,0,0,0,0,0,0,0,0 ,-1,0,0,0, # 1 Y*Qin(t)
-1,1,0,0,0,0,0,0,0,0,0 ,0,0,0,0, # 2 (phi*(SNP+SP)-SP)*Qc(t)
0,0,-1,0,0,0,1,0,0,0,0 ,0,0,0,0, # 3 (phi*(INP1+IP/5)-IP/5)*Qc(t)
0,0,0,-1,0,0,1,0,0,0,0 ,0,0,0,0, # 4 (phi*(INP2+IP/5)-IP/5)*Qc(t)
0,0,0,0,-1,0,1,0,0,0,0 ,0,0,0,0, # 5 (phi*(INP3+IP/5)-IP/5)*Qc(t)
0,0,0,0,0,-1,1,0,0,0,0 ,0,0,0,0, # 6 (phi*(INP4+IP/5)-IP/5)*Qc(t)
0,0,0,0,0,0,1,0,-1,0,0 ,0,0,0,0, # 7 (phi*(JNP+IP/5)-IP/5)*Qc(t),
0,0,0,0,0,0,0,0,0,-1,1 ,0,0,0,0, # 8 (phi*(RNP+RP)-RP)*Qc(t)
1,-1,0,0,0,0,0,0,0,0,0 ,0,0,1,0, # 9 SP*Qp(t)
0,0,0,0,0,0,-1,0,1,0,0 ,0,0,1,1, # 10 (1-alpha)*IP*Qp(t)
0,0,0,0,0,0,-1,0,0,1,0 ,0,0,1,1, # 11 alpha*IP*Qp(t)
0,0,0,0,0,0,0,-1,1,0,0 ,0,0,1,0, # 12 (1-alpha)*IP2*Qp(t)
0,0,0,0,0,0,0,-1,0,1,0 ,0,0,1,0, # 13 alpha*IP2*Qp(t)
0,0,0,0,0,0,0,0,0,1,-1 ,0,0,1,0, # 15 RP*Qp(t)
-1,0,0,0,0,0,0,0,0,0,0 ,1,0,0,0, # 16 mu*SNP
0,0,-1,0,0,0,0,0,0,0,0 ,1,0,0,0, # 17 mu*INP1
0,0,0,-1,0,0,0,0,0,0,0 ,1,0,0,0, # 18 mu*INP2
0,0,0,0,-1,0,0,0,0,0,0 ,1,0,0,0, # 19 mu*INP3
0,0,0,0,0,-1,0,0,0,0,0 ,1,0,0,0, # 20 mu*INP4
0,0,0,0,0,0,0,0,-1,0,0 ,1,0,0,0, # 21 mu*JNP
0,0,0,0,0,0,0,0,0,-1,0 ,1,0,0,0, # 22 mu*RNP
-1,0,1,0,0,0,0,0,0,0,0 ,0,0,0,0, # 23 (beta*SNP*E)/N
0,-1,0,0,0,0,1,0,0,0,0 ,0,0,0,0, # 24 Q4(t)*beta*SP*E/N
0,-1,0,0,0,0,0,1,0,0,0 ,0,0,0,0, # 25 beta*(1-Q4(t))*SP*E/N
0,0,-1,1,0,0,0,0,0,0,0 ,0,0,0,0, # 26 gamma*INP1
0,0,0,-1,1,0,0,0,0,0,0 ,0,0,0,0, # 27 gamma*INP2
0,0,0,0,-1,1,0,0,0,0,0 ,0,0,0,0, # 28 gamma*INP3
0,0,0,0,0,-1,0,0,1,0,0 ,0,0,0,0, # 29 (1-alpha)*gamma*INP4
0,0,0,0,0,-1,0,0,0,1,0 ,0,0,0,0, # 30 alpha*gamma*INP4
0,0,0,0,0,0,-1,0,1,1,0 ,0,1,0,0, # 31 (1-alpha)*fI*IP*Qa(t)
0,0,0,0,0,0,-1,0,0,1,0 ,0,1,0,0  # 32 alpha*fI*IP*Qa(t)
),
ncol=16, byrow=TRUE)
changes <- matrix(
c(1,0,0,0,0,0,0,0,0,0,0 ,-1,0,0,0, # 1 Y*Qin(t)
-1,1,0,0,0,0,0,0,0,0,0 ,0,0,0,0, # 2 (phi*(SNP+SP)-SP)*Qc(t)
0,0,-1,0,0,0,1,0,0,0,0 ,0,0,0,0, # 3 (phi*(INP1+IP/5)-IP/5)*Qc(t)
0,0,0,-1,0,0,1,0,0,0,0 ,0,0,0,0, # 4 (phi*(INP2+IP/5)-IP/5)*Qc(t)
0,0,0,0,-1,0,1,0,0,0,0 ,0,0,0,0, # 5 (phi*(INP3+IP/5)-IP/5)*Qc(t)
0,0,0,0,0,-1,1,0,0,0,0 ,0,0,0,0, # 6 (phi*(INP4+IP/5)-IP/5)*Qc(t)
0,0,0,0,0,0,1,0,-1,0,0 ,0,0,0,0, # 7 (phi*(JNP+IP/5)-IP/5)*Qc(t),
0,0,0,0,0,0,0,0,0,-1,1 ,0,0,0,0, # 8 (phi*(RNP+RP)-RP)*Qc(t)
1,-1,0,0,0,0,0,0,0,0,0 ,0,0,1,0, # 9 SP*Qp(t)
0,0,0,0,0,0,-1,0,1,0,0 ,0,0,1,1, # 10 (1-alpha)*IP*Qp(t)
0,0,0,0,0,0,-1,0,0,1,0 ,0,0,1,1, # 11 alpha*IP*Qp(t)
0,0,0,0,0,0,0,-1,1,0,0 ,0,0,1,0, # 12 (1-alpha)*IP2*Qp(t)
0,0,0,0,0,0,0,-1,0,1,0 ,0,0,1,0, # 13 alpha*IP2*Qp(t)
0,0,0,0,0,0,0,0,0,1,-1 ,0,0,1,0, # 15 RP*Qp(t)
-1,0,0,0,0,0,0,0,0,0,0 ,1,0,0,0, # 16 mu*SNP
0,0,-1,0,0,0,0,0,0,0,0 ,1,0,0,0, # 17 mu*INP1
0,0,0,-1,0,0,0,0,0,0,0 ,1,0,0,0, # 18 mu*INP2
0,0,0,0,-1,0,0,0,0,0,0 ,1,0,0,0, # 19 mu*INP3
0,0,0,0,0,-1,0,0,0,0,0 ,1,0,0,0, # 20 mu*INP4
0,0,0,0,0,0,0,0,-1,0,0 ,1,0,0,0, # 21 mu*JNP
0,0,0,0,0,0,0,0,0,-1,0 ,1,0,0,0, # 22 mu*RNP
-1,0,1,0,0,0,0,0,0,0,0 ,0,0,0,0, # 23 (beta*SNP*E)/N
0,-1,0,0,0,0,1,0,0,0,0 ,0,0,0,0, # 24 Q4(t)*beta*SP*E/N
0,-1,0,0,0,0,0,1,0,0,0 ,0,0,0,0, # 25 beta*(1-Q4(t))*SP*E/N
0,0,-1,1,0,0,0,0,0,0,0 ,0,0,0,0, # 26 gamma*INP1
0,0,0,-1,1,0,0,0,0,0,0 ,0,0,0,0, # 27 gamma*INP2
0,0,0,0,-1,1,0,0,0,0,0 ,0,0,0,0, # 28 gamma*INP3
0,0,0,0,0,-1,0,0,1,0,0 ,0,0,0,0, # 29 (1-alpha)*gamma*INP4
0,0,0,0,0,-1,0,0,0,1,0 ,0,0,0,0, # 30 alpha*gamma*INP4
0,0,0,0,0,0,-1,0,1,1,0 ,0,1,0,0, # 31 (1-alpha)*fI*IP*Qa(t)
0,0,0,0,0,0,-1,0,0,1,0 ,0,1,0,0  # 32 alpha*fI*IP*Qa(t)
),
ncol=15, byrow=TRUE)
colnames(changes) <- c('SNP','SP',INP1,INP2,INP3,INP4,IP,IP2,JNP,RNP,RP,Y,A,K,KI)
colnames(changes) <- c('SNP','SP','INP1','INP2','INP3','INP4','IP','IP2','JNP','RNP','RP','Y','A','K','KI')
View(changes)
library(glogis); library(parallel)
#------------------------------------------------------------#
# modulus function (turns day 366 to calendar day 1)
#------------------------------------------------------------#
mod <- function(a,b,c)
{ R <- a%%b
limit <- function (x){ifelse(x >= c, x, while(x < c) {x <- x + b; return(x)})}
result <- unlist(lapply(R, function(x) limit(x)))
return(result)
}
tp <- 253 #day of parturition
Tg <- 150
tc <- tp - Tg #day conception
Tl <- tp- 3*7 #from here on if infected move to IP2
ta <- tp - 25 # average day of abortion
#create hazard functions for a logistic dist fitted to Autumn 2015 kiddings.
HF <- function(x) {
exp(dglogis(x, location = tp, scale = 4.987, shape = 1.125, log = TRUE) - pglogis(x, location = tp, scale = 4.987, shape = 1.125, log = TRUE, lower=FALSE))
}
HF2 <- function(x) {
exp(dglogis(x, location = tc, scale = 4.987, shape = 1.125, log = TRUE) - pglogis(x, location = tc, scale = 4.987, shape = 1.125, log = TRUE, lower=FALSE))
}
HF3 <- function(x) {
exp(dglogis(x, location = ta, scale = 6.645, shape = 1.068, log = TRUE) - pglogis(x, location = ta, scale = 6.645, shape = 1.068, log = TRUE, lower=FALSE))
}
Qp <- function(t) {ifelse(mod(t,365,1) > (tp+40) | mod(t,365,1) < (tp-30) ,0,HF(mod(t,365,1)))}
Qc <- function(t) {ifelse(mod(t,365,1) > (tc+40) | mod(t,365,1) < (tc-30),0,HF2(mod(t,365,1)))}
Q4 <- function(t) {ifelse(mod(t,365,1)>Tl & mod(t,365,1)<tp+40,0,1)}
Qin <- function(t) {ifelse(mod(t,365,1)<tp+60|mod(t,365,1)>tp+90,0,0.214)}
Qa <- function(t) {ifelse(mod(t,365,1) < (ta-(11.44*3)) | mod(t,365,1) > (ta+(11.44*3)),0,HF3(mod(t,365,1)))} #sd=11.44
# First we define our one-step function.
SIR.onestep <- function (x, params) { #function to calculate one step of stochastic SIR
t    <- x[1] #local variable for time
SNP  <- x[2] #local variable for susceptibles
SP   <- x[3]
INP1 <- x[4] #local variable for infecteds
INP2 <- x[5] #local variable for infecteds
INP3 <- x[6] #local variable for infecteds
INP4 <- x[7] #local variable for infecteds
IP   <- x[8]
IP2  <- x[9]
JNP  <- x[10]
RNP  <- x[11] #local variable for recovereds
RP   <- x[12]
Y    <- x[13]
A    <- x[14]
K    <- x[15] #local variable for environmental contamination
KI   <- x[16] #kidding when infected. not a compartment, just to keep track
E    <- x[17] #environmnet
N <- SNP+SP+INP1+INP2+INP3+INP4+IP+IP2+JNP+RNP+RP #total population size (subject to demographic change)
with( #use with as in deterministic model to simplify code
as.list(params),
{
rates <- c(Y*Qin(t),                         #births
(phi*(SNP+SP)-SP)*Qc(t),          #conceptions
(phi*(INP1+IP/5)-IP/5)*Qc(t),
(phi*(INP2+IP/5)-IP/5)*Qc(t),
(phi*(INP3+IP/5)-IP/5)*Qc(t),
(phi*(INP4+IP/5)-IP/5)*Qc(t),
(phi*(JNP+IP/5)-IP/5)*Qc(t),
(phi*(RNP+RP)-RP)*Qc(t),
SP*Qp(t),                         #kiddings
(1-alpha)*IP*Qp(t),
alpha*IP*Qp(t),
(1-alpha)*IP2*Qp(t),
alpha*IP2*Qp(t),
RP*Qp(t),
mu*SNP,                           #deaths
mu*INP1,
mu*INP2,
mu*INP3,
mu*INP4,
mu*JNP,
mu*RNP,
(beta*SNP*E)/N,                   #transmission terms
Q4(t)*beta*SP*E/N,
beta*(1-Q4(t))*SP*E/N,
gamma*INP1,
gamma*INP2,
gamma*INP3,
(1-alpha)*gamma*INP4,            #recoveries
alpha*gamma*INP4,
(1-alpha)*fI*IP*Qa(t),
alpha*fI*IP*Qa(t)               #abortions
)
rates <- ifelse(rates > 0, rates, exp(-10))     #otherwise negative rates sometimes
changes <- matrix(
c(1,0,0,0,0,0,0,0,0,0,0 ,-1,0,0,0, # 1 Y*Qin(t)
-1,1,0,0,0,0,0,0,0,0,0 ,0,0,0,0, # 2 (phi*(SNP+SP)-SP)*Qc(t)
0,0,-1,0,0,0,1,0,0,0,0 ,0,0,0,0, # 3 (phi*(INP1+IP/5)-IP/5)*Qc(t)
0,0,0,-1,0,0,1,0,0,0,0 ,0,0,0,0, # 4 (phi*(INP2+IP/5)-IP/5)*Qc(t)
0,0,0,0,-1,0,1,0,0,0,0 ,0,0,0,0, # 5 (phi*(INP3+IP/5)-IP/5)*Qc(t)
0,0,0,0,0,-1,1,0,0,0,0 ,0,0,0,0, # 6 (phi*(INP4+IP/5)-IP/5)*Qc(t)
0,0,0,0,0,0,1,0,-1,0,0 ,0,0,0,0, # 7 (phi*(JNP+IP/5)-IP/5)*Qc(t),
0,0,0,0,0,0,0,0,0,-1,1 ,0,0,0,0, # 8 (phi*(RNP+RP)-RP)*Qc(t)
1,-1,0,0,0,0,0,0,0,0,0 ,0,0,1,0, # 9 SP*Qp(t)
0,0,0,0,0,0,-1,0,1,0,0 ,0,0,1,1, # 10 (1-alpha)*IP*Qp(t)
0,0,0,0,0,0,-1,0,0,1,0 ,0,0,1,1, # 11 alpha*IP*Qp(t)
0,0,0,0,0,0,0,-1,1,0,0 ,0,0,1,0, # 12 (1-alpha)*IP2*Qp(t)
0,0,0,0,0,0,0,-1,0,1,0 ,0,0,1,0, # 13 alpha*IP2*Qp(t)
0,0,0,0,0,0,0,0,0,1,-1 ,0,0,1,0, # 14 RP*Qp(t)
-1,0,0,0,0,0,0,0,0,0,0 ,1,0,0,0, # 15 mu*SNP
0,0,-1,0,0,0,0,0,0,0,0 ,1,0,0,0, # 16 mu*INP1
0,0,0,-1,0,0,0,0,0,0,0 ,1,0,0,0, # 17 mu*INP2
0,0,0,0,-1,0,0,0,0,0,0 ,1,0,0,0, # 18 mu*INP3
0,0,0,0,0,-1,0,0,0,0,0 ,1,0,0,0, # 19 mu*INP4
0,0,0,0,0,0,0,0,-1,0,0 ,1,0,0,0, # 20 mu*JNP
0,0,0,0,0,0,0,0,0,-1,0 ,1,0,0,0, # 21 mu*RNP
-1,0,1,0,0,0,0,0,0,0,0 ,0,0,0,0, # 22 (beta*SNP*E)/N
0,-1,0,0,0,0,1,0,0,0,0 ,0,0,0,0, # 23 Q4(t)*beta*SP*E/N
0,-1,0,0,0,0,0,1,0,0,0 ,0,0,0,0, # 24 beta*(1-Q4(t))*SP*E/N
0,0,-1,1,0,0,0,0,0,0,0 ,0,0,0,0, # 25 gamma*INP1
0,0,0,-1,1,0,0,0,0,0,0 ,0,0,0,0, # 26 gamma*INP2
0,0,0,0,-1,1,0,0,0,0,0 ,0,0,0,0, # 27 gamma*INP3
0,0,0,0,0,-1,0,0,1,0,0 ,0,0,0,0, # 28 (1-alpha)*gamma*INP4
0,0,0,0,0,-1,0,0,0,1,0 ,0,0,0,0, # 29 alpha*gamma*INP4
0,0,0,0,0,0,-1,0,1,0,0 ,0,1,0,0, # 30 (1-alpha)*fI*IP*Qa(t)
0,0,0,0,0,0,-1,0,0,1,0 ,0,1,0,0  # 31 alpha*fI*IP*Qa(t)
),
ncol=15, byrow=TRUE)
# colnames(changes) <- c('SNP','SP','INP1','INP2','INP3','INP4','IP','IP2','JNP','RNP','RP','Y','A','K','KI')
tau <- rexp(n=1,rate=sum(rates)) # exponential waiting time
if(tau <= 14){
U <- runif(1) #uniform random deviate
m <- min(which(cumsum(rates)>=U*sum(rates)))
tx <- x[2:16] + changes[m,]
if(all(tx >= 0)){
x <- x[2:16] <-tx
if (E>0) {E = E - E*muE*tau} #when E >0 it'll dacay at specified rate
if (E<0) {E <- 0} #but can never be <0
if (m %in% c(10:11,30:31)) {E <- E + epsilon.p}
}
if(any(tx < 0)){
tau = 0.2
x <- x[2:16]
if (E>0) {E = E - E*muE*tau} #when E >0 it'll dacay at specified rate
if (E<0) {E <- 0} #but can never be <0
}
}
#if rexp(sum(rates)) is a long step force not to be longer than 14d
if(tau > 14){
tau = 0.2
x <- x[2:16]
if (E>0) {E = E - E*muE*tau} #when E >0 it'll dacay at specified rate
if (E<0) {E <- 0} #but can never be <0
}
# E <- E + (INP1+INP2+INP3+INP4+IP+IP2+JNP+JP)*epsilon.f*tau
t <- t + tau
return(out <- c(t, x, E))
}
)
}
# Next we write our function for simulating a whole epidemic.
ModelA <- function (x, params) {
output <- list()
output[[1]] <- x #first record of output is initial condition
k=1
stop<- params$stop
while (as.logical(output[[k]][1]<stop)){
x <- SIR.onestep(x,params)
output[[k+1]] <- x
k=k+1
if(sum(x[c(4:10,17)]) < exp(-10)){break}
}
out <- do.call(rbind,output) #return output
colnames(out) <- c("time","SNP","SP","INP1","INP2","INP3","INP4","IP","IP2","JNP","RNP","RP","Y","A","K","KI","E")
out
}
#------------------------------------------------------------#
# params
#------------------------------------------------------------#
params <- data.frame(
#demographic parameters
phi = 0.95, # fraction of animals to conceive
mu = (1+(22/30)*0.7)/(3.1*365), # daily death rate. Median age = 3.1, phi=0.7,Lav=3.1*365
fI = 0.75, # fraction of infected animals in IP(infected preg) to abort
gamma = 4/14.4, #Infectious period of infected non preg (infperiod = 14.4, ninf = 4)
alpha = 0.2, #fraction persistently infected
beta = 1.8, #Transmission rate per equivalent Coxiella excretion (day ^-1 scaled unit^-1)
#shedding parameters
epsilon.p = 1,     # C. burnetii excretion in partus material (per parturition)
# epsilon.f = 10^(-6)*1000/365, # C. burnetii excretion in feces and urine per day
#C.b. survival parameters
muE = 1/20, #mortality rate for Cb in manure. Bontje et al 2016.
# Additional parameters for the stochastic simulations
start = 103, #avergae day of conception
stop = 365*15
)
xstart <- c(time=params$start,SNP=425, SP=424,INP1=0,INP2=0,INP3=0,INP4=0,IP=1,IP2=0,JNP=0,JP=0,RNP=0,RP=0,Y=150,A=0,K=0,KI=0,E=0)
#run multiple iterations
# how many sims?
nsims=1
#run multiple iterations
# how many sims?
nsims=3
#run in parallel in pc cores
# Initiate cluster
cl <- makeCluster(3)
#need to export the global environment to the clusters
clusterExport(cl, names(.GlobalEnv))
clusterEvalQ(cl, c(library(glogis)))
#run model (takes about 2 mins to run 3 iterations. much faster in C++!
modelOut <- parLapply(cl,1:nsims, function(i) ModelA(xstart,params))
#initial conditions
xstart <- c(time=params$start,SNP=425, SP=424,INP1=0,INP2=0,INP3=0,INP4=0,IP=1,IP2=0,JNP=0,RNP=0,RP=0,Y=150,A=0,K=0,KI=0,E=0)
#run multiple iterations
# how many sims?
nsims=3
#run in parallel in pc cores
# Initiate cluster
cl <- makeCluster(3)
#need to export the global environment to the clusters
clusterExport(cl, names(.GlobalEnv))
clusterEvalQ(cl, c(library(glogis)))
#run model (takes about 2 mins to run 3 iterations. much faster in C++!
modelOut <- parLapply(cl,1:nsims, function(i) ModelA(xstart,params))
stopCluster(cl)
#------------------------------------------------------------#
# Q fever output analysis
#------------------------------------------------------------#
library(lubridate); library(dplyr); library(ggplot2); library(scales)
for(i in 1:nsims){
modelOut[[i]] <- do.call(data.frame, modelOut[[i]])
modelOut[[i]]$iter <- i}
dat <- do.call(rbind, modelOut)
head(modelOut[[1]])
for(i in 1:nsims){
modelOut[[i]] <- do.call(data.frame, modelOut[[i]])
modelOut[[i]]$iter <- i}
for(i in 1:nsims){
# modelOut[[i]] <- do.call(data.frame, modelOut[[i]])
modelOut[[i]]$iter <- i}
dat <- do.call(rbind, modelOut)
head(dat)
str(dat)
View(dat)
# #------------------------------------------------------------#
# TEST
# #------------------------------------------------------------#
dat <- modelOut[[1]]
library(dplyr)
modelOut[[1]] <- do.call(data.frame, modelOut[[1]])
# #------------------------------------------------------------#
# TEST
# #------------------------------------------------------------#
dat <- modelOut[[1]]
#run multiple iterations
# how many sims?
nsims=1
out <- as.data.frame(ModelA(xstart,params))
# #------------------------------------------------------------#
# TEST
# #------------------------------------------------------------#
dat <- out
head(dat)
dat$N <- rowSums(dat[2:12])
head(dat)
plot(dat$time, dat$N, type = 'l')
plot(dat$time, dat$N, type = 'l', ylim =c(0,1200))
lines(dat$time  , dat$SNP)
lines(dat$time  , dat$SP)
plot(dat$time, dat$N, type = 'l', ylim =c(0,1200))
lines(dat$time  , dat$INP1+INP2+INP3+INP4)
head(dat)
lines(dat$time  , dat$INP1+dat$INP2+dat$INP3+dat$INP4)
lines(dat$time  , dat$JNP)
plot(dat$time, dat$N, type = 'l', ylim =c(0,1200))
lines(dat$time  , dat$JP)
plot(dat$time, dat$N, type = 'l', ylim =c(0,1200))
lines(dat$time  , dat$IP)
